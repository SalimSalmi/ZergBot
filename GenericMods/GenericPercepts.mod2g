use GenericPredicates as knowledge.
order = linearall.

module GenericPercepts {
	
	% The handling of the resources percept
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	if percept(resources(_, G, _, _)), bel(gas(OG), not(OG == G)) then delete(gas(OG)) + insert(gas(G)).
	
	% The handling of the friendly units percept
	forall percept(unit(true, Type,Id,Health,Shields,_)), bel(self(MyId,_), not(friendly(Type,Id,Health,Shields)), MyId \= Id) 
	do insert(friendly(Type, Id, Health, Shields)).
	forall bel(friendly(Type, Id, Health, Shields)) , not(percept(unit(true, Type,Id,Health,Shields,_)))
	do delete(friendly(Type,Id,Health, Shields)).
	
	% The handling of the isMorphing percept
	forall percept(unit(true, Type,Id,_,_,Conditions)), bel(member(morphing, Conditions)), not(bel(isMorphing(Type, Id))) 
	do insert(isMorphing(Type, Id)).
	forall bel(isMorphing(Type, Id)), percept(unit(true, Type,Id,_,_,Conditions)), not(bel(member(morphing, Conditions))) 
	do delete(isMorphing(Type, Id)).
	forall bel(isMorphing(Type, Id)), not(percept(unit(true, Type,Id,_,_,_))) do delete(isMorphing(Type, Id)).
	
	% The handling of the unitAmount percept
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
	
	%forall percept(unitAmount(Type,Count),(Type == "Zerg Zergling");(Type == "Zerg Hydralisk")) do insert(unitAttack())
	
	if not(percept(unitAmount("Zerg Zergling",Count1))) then insert(unitAmount("Zerg Zergling",0)).
	if not(percept(unitAmount("Zerg Hydralisk",Count1))) then insert(unitAmount("Zerg Hydralisk",0)).
	
	if bel(unitAmount("Zerg Zergling",Count1)),bel(unitAmount("Zerg Hydralisk",Count2), Count is Count1 + Count2),bel(unitAttack(CountOld),not(CountOld==Count)) then delete(unitAttack(CountOld))+insert(unitAttack(Count)).
	if bel(unitAmount("Zerg Zergling",Count1)),bel(unitAmount("Zerg Hydralisk",Count2), Count is Count1 + Count2),not(bel(unitAttack(_))) then insert(unitAttack(Count)).
	
	% The handling of the status percept
	if percept(status(_,_,_,_,X,Y)),bel(self(Id,_)),not(bel(myPos(Id,X,Y))) then insert(myPos(Id,X,Y)).
	if bel(self(Id,_),myPos(Id,X,Y)), not(percept(status(_,_,_,_,X,Y))) then delete(myPos(Id,X,Y)).
	
	
	
	
	
}