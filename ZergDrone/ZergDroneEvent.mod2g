use ZergDrone as knowledge.
use "../GenericMods/GenericPercepts" as module.

module ZergDroneEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	%%insert own postion
	if percept(status(_,_,_,_,X,Y)), not(bel(myPos(X,Y))) then insert(myPos(X,Y)).
	if bel(myPos(X,Y)), not(percept(status(_,_,_,_,X,Y))) then delete(myPos(X,Y)).
	
	% Received builder task from the Overmind
	if (Name).sent:(builder) then insert(builder).
	
	% If don't know hatchery position yet, ask the overMind
	if not(bel(hatcheryPosition(_, _))) then (overMind).send?(hatcheryPosition).
	
	% If hatchery position is told, insert it in knowledge base
	if (_).sent:(hatcheryPosition(X, Y)) then insert(hatcheryPosition(X, Y)).
	
	% Drone positions
	if bel(myPos(X,Y)) then allother.send(myPos(X,Y)).
	forall (Name).sent(myPos(X,Y)), not(bel(otherPos(Name, X, Y))) do insert(otherPos(Name, X, Y)).
	forall (Name).sent(myPos(X,Y)), bel(otherPos(Name, X2, Y2), not(X==X2), not(Y==Y2)) do delete(otherPos(Name, X2, Y2)).
	
	if (_).sent(morph(Building, _, _)), a-goal(morph(Building, X, Y)) then drop(morph(Building, X, Y)).
	
	if (_).sent(gasReady), goal(workerActivity(Id, gatheringGas)) then drop(workerActivity(Id, gatheringGas)) + adopt(workerActivity(Id, gatheringMinerals)). 
	
	%%%Getting message from Extractor
	
	if (_).sent(extractor(Id,X,Y)) then insert(extractor(Id,X,Y)).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	% The generic percepts most units use
	if true then GenericPercepts.	
	
	% The handling of the conditions 
	if percept(status(_,_,_,NewCond,_,_)), bel(condition(OldCond), NewCond \= OldCond) then delete(condition(OldCond)) + insert(condition(NewCond)).
	
	% The handling of mineral and gas resources
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	if percept(resources(_, G, _, _)), bel(gas(OG), not(G == OG)) then delete(gas(OG)) + insert(gas(G)).
	
	% The handling of mineralfields	
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall bel(mineralField(Id,Amount,X,Y)), not(percept(mineralField(Id,Amount,_,X,Y))) do delete(mineralField(Id,Amount,X,Y)).
	
	% The handling of the constructionSites
	forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
	forall bel(constructionSite(X,Y)),not(percept(constructionSite(X,Y))) do delete(constructionSite(X,Y)).
	
	% The handling of the workerActivity
	forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
	forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	% If there is no spawningpool yet, create one
	if not(goal(unitAmount("Zerg Spawning Pool", 1))) then adopt(unitAmount("Zerg Spawning Pool", 1)).
	
	% If the worker is not busy yet, start gathering minerals
	if bel(not(busy), self(Id, _)) then adopt(workerActivity(Id, gatheringMinerals)).
	
	forall (_).sent:(unitAmount(Building,N)) do adopt(unitAmount(Building,N)).
	
	
	
	if a-goal(unitAmount("Zerg Spawning Pool", E)), bel(closestBuildLoc(X1, Y1),
	 (unitAmount("Zerg Spawning Pool",ECurrent), E > ECurrent ; not(unitAmount("Zerg Spawning Pool", _))), myPos(X2,Y2),
	 distance(X1,Y1,X2,Y2,D2), not(closestOther(X1,Y1, D2)))
	 then allother.send:(morph("Zerg Spawning Pool", X1, Y1)) + adopt(morph("Zerg Spawning Pool", X1, Y1)).
	 
	if a-goal(unitAmount("Zerg Hydralisk Den", E)), bel(closestBuildLoc(X1, Y1),
	 (unitAmount("Zerg Hydralisk Den",ECurrent), E > ECurrent ; not(unitAmount("Zerg Hydralisk Den", _))), myPos(X2,Y2),
	 distance(X1,Y1,X2,Y2,D2), not(closestOther(X1,Y1, D2)))
	 then allother.send:(morph("Zerg Hydralisk Den", X1, Y1)) + adopt(morph("Zerg Hydralisk Den", X1, Y1)). 
	
	if a-goal(unitAmount("Zerg Extractor", E)), percept(vespeneGeyser(_,_,_,X1,Y1)), bel(hatcheryPosition(Xh, Yh), distance(X1,Y1,Xh,Yh,D), D<10,
	 (unitAmount("Zerg Extractor",ECurrent), E > ECurrent ; not(unitAmount("Zerg Extractor", _))), myPos(X2,Y2),
	 distance(X1,Y1,X2,Y2,D2), not(closestOther(X1,Y1, D2)))
	 then adopt(morph("Zerg Extractor", X1, Y1)) + allother.send:(morph("Zerg Extractor", X1, Y1)).
	 
	 %%Changing to gas gathering
	
	if bel(self(Id,_),myPos(X2,Y2),distance(X,Y,X2,Y2,D), D < 10, shouldMineVespene) then drop(workerActivity(Id,gatheringMinerals))+adopt(workerActivity(Id, gatheringGas)).
	
	if goal(workerActivity(Id, gatheringGas)) then allother.send:(gasReady).
	if not(bel(shouldMineVespene)), bel(self(Id,_)) then drop(workerActivity(Id, gatheringGas))+adopt(workerActivity(Id,gatheringMinerals)). 
	
	%if bel(extractor(IdEx,X,Y),self(Id,_),myPos(X2,Y2), distance(X,Y,X2,Y2,D), not(closestOther(X,Y,D))) then drop(workerActivity(Id,gatheringMinerals))+adopt(workerActivity(Id, gatheringGas)).
	
	
}