use ZergDrone as knowledge.
use "../GenericMods/GenericPercepts" as module.

module ZergDroneEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	
	% Received builder task from the Overmind
	if (Name).sent:(builder) then insert(builder).
	
	% If don't know hatchery position yet, ask the overMind
	if not(bel(hatcheryPosition(_, _))) then (overMind).send?(hatcheryPosition).
	
	% If hatchery position is told, insert it in knowledge base
	if (_).sent:(hatcheryPosition(X, Y)) then insert(hatcheryPosition(X, Y)).
	
	% Drone positions
	if bel(myPos(Id,X,Y)) then allother.send(myPos(Id,X,Y)).
	forall (Name).sent(myPos(Id,X,Y)), bel(otherPos(Name,Id,X2, Y2), X2\=X;Y2\=Y) do delete(otherPos(Name,Id,X2, Y2)).
	forall (Name).sent(myPos(Id,X,Y)), not(bel(otherPos(Name,Id, X, Y))) do insert(otherPos(Name,Id,X, Y)).
	
	%%Check for building morph uniqueness
	if (_).sent(morph(Building, _, _)), a-goal(morph(Building, X, Y)) then drop(morph(Building, X, Y)).
	
	
	%%%Getting message from Extractor
	if (_).sent(extractor(Id,X,Y)) then insert(extractor(Id,X,Y)).
	
	
	%%Communication for gas collection
	if (_).sent:(gasStarted(IdEx)),bel(self(Id,_),not(workerActivity(Id,gatheringGas))) then drop(gasGather(IdEx))+adopt(workerActivity(Id,gatheringMinerals)).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	% The generic percepts most units use
	if true then GenericPercepts.	
	
	% The handling of the conditions 
	if percept(status(_,_,_,NewCond,_,_)), bel(condition(OldCond), NewCond \= OldCond) then delete(condition(OldCond)) + insert(condition(NewCond)).
	
	% The handling of mineral and gas resources
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	if percept(resources(_, G, _, _)), bel(gas(OG), not(G == OG)) then delete(gas(OG)) + insert(gas(G)).
	
	% The handling of mineralfields	
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall bel(mineralField(Id,Amount,X,Y)), not(percept(mineralField(Id,Amount,_,X,Y))) do delete(mineralField(Id,Amount,X,Y)).
	
	% The handling of the constructionSites
	forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
	forall bel(constructionSite(X,Y)),not(percept(constructionSite(X,Y))) do delete(constructionSite(X,Y)).
	
	% The handling of the workerActivity
	forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
	forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	% If there is no spawningpool yet, create one
	if not(goal(unitAmount("Zerg Spawning Pool", 1))) then adopt(unitAmount("Zerg Spawning Pool", 1)).
	
	% If the worker is not busy yet, start gathering minerals
	if bel(not(busy), self(Id, _)) then adopt(workerActivity(Id, gatheringMinerals)).
	
	forall (_).sent:(unitAmount(Building,N)) do adopt(unitAmount(Building,N)).	
	
	if a-goal(unitAmount(Building, E)), bel(closestBuildLoc(X1, Y1),
	 (unitAmount(Building,ECurrent), E > ECurrent ; not(unitAmount(Building, _))), myPos(_,X2,Y2),
	 distance(X1,Y1,X2,Y2,D2), not(closestOther(X1,Y1, D2)))
	 then allother.send:(morph(Building, X1, Y1)) + adopt(morph(Building, X1, Y1)).
	 	
	if a-goal(unitAmount("Zerg Extractor", E)), percept(vespeneGeyser(_,_,_,X1,Y1)), bel(hatcheryPosition(Xh, Yh), distance(X1,Y1,Xh,Yh,D), D<10,
	 (unitAmount("Zerg Extractor",ECurrent), E > ECurrent ; not(unitAmount("Zerg Extractor", _))), myPos(_,X2,Y2),
	 distance(X1,Y1,X2,Y2,D2), not(closestOther(X1,Y1, D2)))
	 then adopt(morph("Zerg Extractor", X1, Y1)) + allother.send:(morph("Zerg Extractor", X1, Y1)).
	 
	 %%Changing to gas gathering
	if not(goal(gasGather(_))), bel(not(workerActivity(_,gatheringGas)),extractor(IdEx,X,Y), myPos(Id,X1,Y1), distance(X,Y,X1,Y1,D1),not(closestOtherGas(X,Y,D1))) then adopt(gasGather(IdEx))+drop(workerActivity(Id,gatheringMinerals))+allother.send:(gasStarted(IdEx)).
	if not(goal(gasGather(_))), bel(aggregate_all(count, workerActivity(_,gatheringGas), Count), Count == 1,extractor(IdEx,X,Y), myPos(Id,X1,Y1), distance(X,Y,X1,Y1,D1),not(closestOtherGas(X,Y,D1))) then adopt(gasGather(IdEx))+drop(workerActivity(Id,gatheringMinerals))+allother.send:(gasStarted(IdEx)).
	
	
}